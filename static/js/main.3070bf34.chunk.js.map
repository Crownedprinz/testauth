{"version":3,"sources":["index.js"],"names":["User","props","Object","_Users_skersch_Documents_myfork_googleauth_website_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_skersch_Documents_myfork_googleauth_website_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_skersch_Documents_myfork_googleauth_website_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","undefined","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","data","name","React","Component","Demo","_this","state","user","setupStitch","appName","stitchClient","Stitch","hasAppClient","defaultAppClient","initializeDefaultAppClient","auth","hasRedirectResult","handleRedirectResult","then","console","log","isLoggedIn","userState","profile","setState","credential","GoogleRedirectCredential","loginWithRedirect","ReactDOM","render","document","getElementById"],"mappings":"sNAMQA,cAEJ,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,0EAIN,YAAyBO,IAArBJ,KAAKH,MAAMQ,MAA4B,KAEpCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,WAAMR,KAAKH,MAAMQ,MAAMI,KAAKC,cAVrBC,IAAMC,WAenBC,cAEJ,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,IACjBC,EAAAhB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,KAAAH,KAAMH,KACDkB,MAAQ,CACXC,KAAM,IAHSF,mFAQjBd,KAAKiB,oDAOL,IAAMC,EAAU,4BAIVC,EAAeC,IAAOC,aAAaH,GAAWE,IAAOE,iBAAmBF,IAAOG,2BAA2BL,GAUhH,GANIC,EAAaK,KAAKC,qBAClBN,EAAaK,KAAKE,uBAAuBC,KAAK,SAAAX,GAC9CY,QAAQC,IAAI,+BAIXV,EAAaK,KAAKM,WAGhB,CAGL,IAAIC,EAAY,GAChBA,EAAU,GAAKZ,EAAaK,KAAKR,KAAKgB,QACtChC,KAAKiC,SAAS,CACZjB,KAAMe,QATyB,CACjC,IAAMG,EAAa,IAAIC,IACvBf,IAAOE,iBAAiBE,KAAKY,kBAAkBF,sCAajD,OAAIlC,KAAKe,MAAMC,OAAS,GACf,GAEFhB,KAAKe,MAAMC,kDAIlBY,QAAQC,IAAI,sDAIZ,YAA2BzB,IAAvBJ,KAAKe,MAAMC,KAAK,GACX,KAGPV,EAAAC,EAAAC,cAACZ,EAAD,CAAMS,MAAOL,KAAKe,MAAMC,KAAK,YA7DhBL,IAAMC,WAoEzByB,IAASC,OACPhC,EAAAC,EAAAC,cAACK,EAAD,MACA0B,SAASC,eAAe","file":"static/js/main.3070bf34.chunk.js","sourcesContent":["  import React from 'react';\n  import ReactDOM from 'react-dom';\n\n  import { Stitch, GoogleRedirectCredential } from \"mongodb-stitch-browser-sdk\";\n\n  /** display user information **/\n  class User extends React.Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n      if (this.props.value === undefined) return null;\n      \n      return <div>\n              <pre>{this.props.value.data.name}</pre>\n              </div>\n    }\n  }\n\n  class Demo extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = { \n        user: [],\n      }\n    }\n\n    componentDidMount() {\n      this.setupStitch();\n    }\n\n    setupStitch() {\n      //copy the name of your google-auth enabled stitch application here\n      //the name of the app will typically be the stitch application name\n      //with a \"-\"\" + random string appended\n      const appName = 'authentication_test-htbrq';\n\n      //need a description of how this works as the API method names are a\n      //little unclear\n      const stitchClient = Stitch.hasAppClient(appName) ? Stitch.defaultAppClient : Stitch.initializeDefaultAppClient(appName);\n      \n      //check if this user has already authenticated and we're\n      //here from the redirect. If so, process the redirect.\n      if (stitchClient.auth.hasRedirectResult()) {\n          stitchClient.auth.handleRedirectResult().then(user => {\n          console.log(\"processed redirect result\");\n      })}\n\n      //manage user authentication state\n      if (!stitchClient.auth.isLoggedIn) {\n        const credential = new GoogleRedirectCredential();\n        Stitch.defaultAppClient.auth.loginWithRedirect(credential);\n      } else {\n        //the stitch client marks this user as logged in, add the user\n        //profile to state so we can view their name on the page\n        var userState = [];\n        userState[0] = stitchClient.auth.user.profile;\n        this.setState({\n          user: userState,\n        });\n      }\n    }\n\n    getUser() {\n      if (this.state.user === []) {\n        return {};\n      }\n      return this.state.user;\n    }\n\n    componentDidUpdate() {\n      console.log(\"component updated\");\n    }\n\n    render() {\n      if (this.state.user[0] === undefined) {\n        return null;\n      }\n      return (\n        <User value={this.state.user[0]}/>\n      )\n    }\n  }\n\n  // ========================================\n     \n  ReactDOM.render(\n    <Demo />,\n    document.getElementById('root')\n  );"],"sourceRoot":""}